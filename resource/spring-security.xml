<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context.xsd
            http://www.springframework.org/schema/aop
            http://www.springframework.org/schema/aop/spring-aop.xsd
            http://www.springframework.org/schema/tx
            http://www.springframework.org/schema/tx/spring-tx.xsd
            http://www.springframework.org/schema/mvc
            http://www.springframework.org/schema/mvc/spring-mvc.xsd
            http://www.springframework.org/schema/security
            http://www.springframework.org/schema/security/spring-security.xsd">

    <!-- 释放静态资源 -->
    <security:http pattern="/css/**" security="none"/>
    <security:http pattern="/image/**" security="none"/>
    <security:http pattern="/plugins/**" security="none"/>

    <!-- 配置springSecurity -->
    <!-- 设置可以用spring的elbds表达式配置Spring Security并自动生成对象的配置组件(过滤器)-->
    <!--
    auto-config="true" 表示自动加载springSecurity的配置文件
    use-expressions="true" 表示使用spring的el表达式来配置springSecurity
    -->
    <security:http auto-config="true" use-expressions="true">
        <!-- 让认证页面可以匿名访问(可以不登录就可以访问) -->
        <security:intercept-url pattern="/login.jsp" access="permitAll()"/>

        <!-- 拦截资源 -->
        <!-- 使用spring的el表达式来指定项目所有资源访问都必须有ROLE_USER角色 -->
        <!--
       pattern="/**" 拦截所有资源
       access="hasAnyRole('ROLE_USER')" 表示只有ROLE_USER角色才能访问资源
       -->
        <security:intercept-url pattern="/**" access="hasAnyRole('ROLE_USER')"/>

        <!-- 配置认证信息 -->
        <!--
        login-page="/login.jsp" : 指定登录页面
        login-processing(处理)-url="/login" : 指定认证的处理器地址(默认登录地址的端口号/认证的处理器地址,一般为login)
        default-target(目标)-url="/index.jsp" : 指定认证(登录)成功默认跳转的页面(只是默认,如果正在访问订单页面发现没有登录,登录后跳转到订单页面)
        authentication-failure(失败)-url="/failer.jsp" : 指定认证失败默认跳转的页面
        表单中默认的name属性:
            用户框: name="username"
            密码框: name="password"
        username-parameter="username" : 指定用户框中name属性的值为username
        password-parameter="password" : 指定密码框中name属性的值为password
        -->
        <security:form-login login-page="/login.jsp"
                             login-processing-url="/login"
                             default-target-url="/index.jsp"
                             authentication-failure-url="/failer.jsp"
                             username-parameter="username"
                             password-parameter="password"/>
        <!-- 配置退出登录信息 -->
        <!--
        logout-url="/logout" : 默认的,spring Security提供的
        -->
        <security:logout logout-url="/logout"
                         logout-success-url="/login.jsp"/>

    </security:http>

    <!-- 设置Spring Security认证用户信息来源 -->
    <!--
    {noop} springSecurity默认的认证必须是加密的,加上{noop}表示不加密认证。
    -->
    <security:authentication-manager>
        <security:authentication-provider>
            <security:user-service>
                <security:user name="user" password="{noop}user"
                               authorities="ROLE_USER"/>
                <security:user name="admin" password="{noop}admin"
                               authorities="ROLE_ADMIN"/>
            </security:user-service>
        </security:authentication-provider>
    </security:authentication-manager>
</beans>